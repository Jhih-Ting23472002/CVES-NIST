import { Component, Input, OnInit, OnChanges, OnDestroy, ChangeDetectionStrategy, ViewChild, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatTableModule, MatTableDataSource } from '@angular/material/table';
import { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';
import { MatSortModule, MatSort } from '@angular/material/sort';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatChipsModule } from '@angular/material/chips';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatCardModule } from '@angular/material/card';
import { MatExpansionModule } from '@angular/material/expansion';
import { FormsModule } from '@angular/forms';
import { Subject, debounceTime, takeUntil } from 'rxjs';

import { Vulnerability } from '../../core/models/vulnerability.model';

interface VulnerabilityTableRow extends Vulnerability {
  packageName: string;
}

@Component({
  selector: 'app-vulnerability-table',
  standalone: true,
  imports: [
    CommonModule,
    MatTableModule,
    MatPaginatorModule,
    MatSortModule,
    MatIconModule,
    MatButtonModule,
    MatChipsModule,
    MatTooltipModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatCardModule,
    MatExpansionModule,
    FormsModule
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <mat-card class="vulnerability-table-card">
      <mat-card-header>
        <mat-card-title>
          <mat-icon>security</mat-icon>
          安全漏洞列表
        </mat-card-title>
        <mat-card-subtitle *ngIf="dataSource.data.length > 0">
          找到 {{ dataSource.data.length }} 個漏洞
        </mat-card-subtitle>
      </mat-card-header>
      
      <mat-card-content>
        <!-- 篩選控制區 -->
        <div class="filter-controls" *ngIf="dataSource.data.length > 0">
          <mat-form-field appearance="outline" class="search-field">
            <mat-label>搜尋漏洞</mat-label>
            <input matInput 
                   [(ngModel)]="searchTerm" 
                   (input)="applyFilter()"
                   placeholder="CVE ID、套件名稱或描述">
            <mat-icon matSuffix>search</mat-icon>
          </mat-form-field>
          
          <mat-form-field appearance="outline" class="severity-filter">
            <mat-label>風險等級</mat-label>
            <mat-select [(ngModel)]="severityFilter" (selectionChange)="applyFilter()" multiple>
              <mat-option value="CRITICAL">嚴重</mat-option>
              <mat-option value="HIGH">高風險</mat-option>
              <mat-option value="MEDIUM">中風險</mat-option>
              <mat-option value="LOW">低風險</mat-option>
            </mat-select>
          </mat-form-field>
          
          <div class="filter-summary" *ngIf="isFiltered()">
            <mat-chip-set>
              <mat-chip removable (removed)="clearFilters()">
                <mat-icon matChipRemove>cancel</mat-icon>
                {{ getFilterSummary() }}
              </mat-chip>
            </mat-chip-set>
          </div>
        </div>
        
        <!-- 漏洞統計 -->
        <div class="vulnerability-stats" *ngIf="dataSource.data.length > 0">
          <div class="stat-item critical" *ngIf="severityStats.CRITICAL > 0">
            <mat-icon>dangerous</mat-icon>
            <span class="stat-number">{{ severityStats.CRITICAL }}</span>
            <span class="stat-label">嚴重</span>
          </div>
          <div class="stat-item high" *ngIf="severityStats.HIGH > 0">
            <mat-icon>warning</mat-icon>
            <span class="stat-number">{{ severityStats.HIGH }}</span>
            <span class="stat-label">高風險</span>
          </div>
          <div class="stat-item medium" *ngIf="severityStats.MEDIUM > 0">
            <mat-icon>error_outline</mat-icon>
            <span class="stat-number">{{ severityStats.MEDIUM }}</span>
            <span class="stat-label">中風險</span>
          </div>
          <div class="stat-item low" *ngIf="severityStats.LOW > 0">
            <mat-icon>info</mat-icon>
            <span class="stat-number">{{ severityStats.LOW }}</span>
            <span class="stat-label">低風險</span>
          </div>
        </div>
        
        <!-- 資料表格 -->
        <div class="table-container" *ngIf="dataSource.data.length > 0">
          <table mat-table [dataSource]="dataSource" matSort class="vulnerability-table">
            <!-- 套件名稱欄位 -->
            <ng-container matColumnDef="packageName">
              <th mat-header-cell *matHeaderCellDef mat-sort-header>套件名稱</th>
              <td mat-cell *matCellDef="let element">
                <div class="package-name-cell">
                  <span class="package-name">{{ element.packageName }}</span>
                </div>
              </td>
            </ng-container>
            
            <!-- CVE ID 欄位 -->
            <ng-container matColumnDef="cveId">
              <th mat-header-cell *matHeaderCellDef mat-sort-header>CVE ID</th>
              <td mat-cell *matCellDef="let element">
                <span class="cve-id">{{ element.cveId }}</span>
              </td>
            </ng-container>
            
            <!-- 風險等級欄位 -->
            <ng-container matColumnDef="severity">
              <th mat-header-cell *matHeaderCellDef mat-sort-header>風險等級</th>
              <td mat-cell *matCellDef="let element">
                <mat-chip [class]="'severity-' + element.severity.toLowerCase()">
                  {{ getSeverityLabel(element.severity) }}
                </mat-chip>
              </td>
            </ng-container>
            
            <!-- CVSS 分數欄位 -->
            <ng-container matColumnDef="cvssScore">
              <th mat-header-cell *matHeaderCellDef mat-sort-header>CVSS 分數</th>
              <td mat-cell *matCellDef="let element">
                <div class="cvss-score-cell">
                  <span class="cvss-score" [class]="'score-' + element.severity.toLowerCase()">
                    {{ element.cvssScore || 'N/A' }}
                  </span>
                </div>
              </td>
            </ng-container>
            
            <!-- 發布日期欄位 -->
            <ng-container matColumnDef="publishedDate">
              <th mat-header-cell *matHeaderCellDef mat-sort-header>發布日期</th>
              <td mat-cell *matCellDef="let element">
                <span class="publish-date">{{ formatDate(element.publishedDate) }}</span>
              </td>
            </ng-container>
            
            <!-- 修復版本欄位 -->
            <ng-container matColumnDef="fixedVersion">
              <th mat-header-cell *matHeaderCellDef>修復版本</th>
              <td mat-cell *matCellDef="let element">
                <div class="fixed-version-cell">
                  <span *ngIf="element.fixedVersion" class="fixed-version">
                    {{ element.fixedVersion }}
                  </span>
                  <span *ngIf="!element.fixedVersion" class="no-fix">
                    未知
                  </span>
                </div>
              </td>
            </ng-container>
            
            <!-- 表格標題列 -->
            <tr mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></tr>
            
            <!-- 資料列 -->
            <tr mat-row *matRowDef="let row; columns: displayedColumns;" 
                [class]="'severity-row-' + row.severity.toLowerCase()"></tr>
          </table>
        </div>
        
        <!-- 分頁器 -->
        <mat-paginator 
          *ngIf="dataSource.data.length > 0"
          [pageSizeOptions]="[10, 25, 50, 100]" 
          [pageSize]="25"
          [showFirstLastButtons]="true"
          aria-label="選擇頁面">
        </mat-paginator>
        
        <!-- 空狀態 -->
        <div class="empty-state" *ngIf="dataSource.data.length === 0">
          <mat-icon>security</mat-icon>
          <h3>沒有發現漏洞</h3>
          <p>這是個好消息！所有掃描的套件目前都沒有已知的安全漏洞。</p>
        </div>
      </mat-card-content>
    </mat-card>
  `,
  styles: [`
    .vulnerability-table-card {
      margin: 16px 0;
    }
    
    .vulnerability-table-card mat-card-header {
      margin-bottom: 16px;
    }
    
    .vulnerability-table-card mat-card-title {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    /* 篩選控制區 */
    .filter-controls {
      display: flex;
      gap: 16px;
      margin-bottom: 16px;
      align-items: center;
      flex-wrap: wrap;
    }
    
    .search-field {
      flex: 1;
      min-width: 250px;
    }
    
    .severity-filter {
      min-width: 150px;
    }
    
    .filter-summary {
      flex: 1;
    }
    
    /* 漏洞統計 */
    .vulnerability-stats {
      display: flex;
      gap: 16px;
      margin-bottom: 24px;
      flex-wrap: wrap;
    }
    
    .stat-item {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
    }
    
    .stat-item.critical { background-color: #d32f2f; }
    .stat-item.high { background-color: #f57c00; }
    .stat-item.medium { background-color: #e65100; }
    .stat-item.low { background-color: #388e3c; }
    
    .stat-number {
      font-size: 18px;
      font-weight: 600;
    }
    
    .stat-label {
      font-size: 12px;
    }
    
    /* 表格容器 */
    .table-container {
      overflow-x: auto;
      max-height: 600px;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
    }
    
    .vulnerability-table {
      width: 100%;
    }
    
    /* 表格儲存格 */
    .package-name-cell .package-name {
      font-family: 'Roboto Mono', monospace;
      font-weight: 500;
      color: #1976d2;
    }
    
    .cve-id-cell {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .cve-id {
      font-family: 'Roboto Mono', monospace;
      font-size: 13px;
      background-color: #f5f5f5;
      padding: 4px 8px;
      border-radius: 4px;
    }
    
    .cvss-score {
      font-weight: 600;
      padding: 4px 8px;
      border-radius: 4px;
      color: white;
    }
    
    .cvss-score.score-critical { background-color: #d32f2f; }
    .cvss-score.score-high { background-color: #f57c00; }
    .cvss-score.score-medium { background-color: #e65100; }
    .cvss-score.score-low { background-color: #388e3c; }
    
    .publish-date {
      font-size: 14px;
      color: #666;
    }
    
    .fixed-version {
      font-family: 'Roboto Mono', monospace;
      background-color: #e8f5e8;
      color: #2e7d32;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
    }
    
    .no-fix {
      color: #757575;
      font-style: italic;
    }
    
    /* 風險等級樣式 */
    .severity-critical { 
      background-color: #d32f2f !important; 
      color: white !important;
    }
    .severity-high { 
      background-color: #f57c00 !important; 
      color: white !important;
    }
    .severity-medium { 
      background-color: #e65100 !important; 
      color: white !important;
    }
    .severity-low { 
      background-color: #388e3c !important; 
      color: white !important;
    }
    
    /* 表格列樣式 */
    .severity-row-critical {
      border-left: 4px solid #d32f2f;
    }
    .severity-row-high {
      border-left: 4px solid #f57c00;
    }
    .severity-row-medium {
      border-left: 4px solid #e65100;
    }
    .severity-row-low {
      border-left: 4px solid #388e3c;
    }
    
    .expanded-row {
      background-color: #f8f9fa;
    }
    
    /* 展開內容 */
    .expansion-row {
      height: 0;
    }
    
    .expanded-content {
      padding: 16px;
      background-color: #fafafa;
      border-top: 1px solid #e0e0e0;
    }
    
    /* 空狀態 */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 48px 16px;
      text-align: center;
      color: #757575;
    }
    
    .empty-state mat-icon {
      font-size: 64px;
      width: 64px;
      height: 64px;
      color: #4caf50;
      margin-bottom: 16px;
    }
    
    .empty-state h3 {
      margin: 0 0 8px 0;
      color: #333;
    }
    
    .empty-state p {
      margin: 0;
      max-width: 400px;
    }
    
    /* 響應式設計 */
    @media (max-width: 768px) {
      .filter-controls {
        flex-direction: column;
        align-items: stretch;
      }
      
      .vulnerability-stats {
        justify-content: center;
      }
      
      .table-container {
        font-size: 14px;
      }
      
      .cve-id {
        display: none;
      }
    }
  `],
  animations: [
    // 這裡可以加入展開動畫，暫時省略
  ]
})
export class VulnerabilityTableComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {
  @Input() scanResults: {packageName: string, vulnerabilities: Vulnerability[]}[] = [];
  
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  
  // 表格配置
  displayedColumns: string[] = ['packageName', 'cveId', 'severity', 'cvssScore', 'publishedDate', 'fixedVersion'];
  dataSource = new MatTableDataSource<VulnerabilityTableRow>([]);
  
  // 篩選
  searchTerm = '';
  severityFilter: string[] = [];
  private filterSubject = new Subject<void>();
  
  // 統計
  severityStats = { CRITICAL: 0, HIGH: 0, MEDIUM: 0, LOW: 0 };
  
  // 生命週期管理
  private destroy$ = new Subject<void>();
  
  constructor(private cdr: ChangeDetectorRef) {}
  
  ngOnInit(): void {
    // 設定篩選防抖
    this.filterSubject
      .pipe(
        debounceTime(300),
        takeUntil(this.destroy$)
      )
      .subscribe(() => {
        this.performFilter();
      });
      
    this.processData();
  }
  
  ngOnChanges(): void {
    this.processData();
  }
  
  ngAfterViewInit(): void {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    
    // 自訂排序
    this.dataSource.sortingDataAccessor = (data: VulnerabilityTableRow, sortHeaderId: string) => {
      switch (sortHeaderId) {
        case 'severity':
          return this.getSeverityOrder(data.severity);
        case 'cvssScore':
          return data.cvssScore || 0;
        case 'publishedDate':
          return new Date(data.publishedDate).getTime();
        default:
          return data[sortHeaderId as keyof VulnerabilityTableRow] as string;
      }
    };
  }
  
  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
  
  private processData(): void {
    // 轉換資料格式
    const tableData: VulnerabilityTableRow[] = [];
    this.severityStats = { CRITICAL: 0, HIGH: 0, MEDIUM: 0, LOW: 0 };
    
    this.scanResults.forEach(result => {
      result.vulnerabilities.forEach(vulnerability => {
        tableData.push({
          ...vulnerability,
          packageName: result.packageName
        });
        
        // 更新統計
        if (this.severityStats.hasOwnProperty(vulnerability.severity)) {
          this.severityStats[vulnerability.severity as keyof typeof this.severityStats]++;
        }
      });
    });
    
    // 預設排序（按嚴重程度和 CVSS 分數）
    tableData.sort((a, b) => {
      const severityDiff = this.getSeverityOrder(a.severity) - this.getSeverityOrder(b.severity);
      if (severityDiff !== 0) return severityDiff;
      return (b.cvssScore || 0) - (a.cvssScore || 0);
    });
    
    this.dataSource.data = tableData;
  }
  
  applyFilter(): void {
    this.filterSubject.next();
  }
  
  private performFilter(): void {
    this.dataSource.filterPredicate = (data: VulnerabilityTableRow, filter: string) => {
      const searchMatch = !this.searchTerm || 
        data.packageName.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        data.cveId.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        data.description.toLowerCase().includes(this.searchTerm.toLowerCase());
      
      const severityMatch = this.severityFilter.length === 0 || 
        this.severityFilter.includes(data.severity);
      
      return searchMatch && severityMatch;
    };
    
    // 觸發篩選並重置分頁
    this.dataSource.filter = Date.now().toString();
    
    // 重置到第一頁
    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
    
    // 觸發變更檢測
    this.cdr.markForCheck();
  }
  
  
  isFiltered(): boolean {
    return this.searchTerm.length > 0 || this.severityFilter.length > 0;
  }
  
  getFilterSummary(): string {
    const parts = [];
    if (this.searchTerm) parts.push(`搜尋: "${this.searchTerm}"`);
    if (this.severityFilter.length > 0) parts.push(`風險: ${this.severityFilter.join(', ')}`);
    return parts.join(', ');
  }
  
  clearFilters(): void {
    this.searchTerm = '';
    this.severityFilter = [];
    this.applyFilter();
  }
  
  getSeverityLabel(severity: string): string {
    const labels: { [key: string]: string } = {
      'CRITICAL': '嚴重',
      'HIGH': '高風險',
      'MEDIUM': '中風險',
      'LOW': '低風險'
    };
    return labels[severity] || severity;
  }
  
  private getSeverityOrder(severity: string): number {
    const order: { [key: string]: number } = {
      'CRITICAL': 0,
      'HIGH': 1,
      'MEDIUM': 2,
      'LOW': 3
    };
    return order[severity] || 999;
  }
  
  formatDate(dateString: string): string {
    if (!dateString) return 'N/A';
    
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('zh-TW', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      });
    } catch {
      return 'N/A';
    }
  }

}