import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatChipsModule } from '@angular/material/chips';
import { MatIconModule } from '@angular/material/icon';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';
import { Vulnerability } from '../../core/models/vulnerability.model';

@Component({
  selector: 'app-vulnerability-detail',
  standalone: true,
  imports: [
    CommonModule,
    MatCardModule,
    MatChipsModule,
    MatIconModule,
    MatExpansionModule,
    MatProgressBarModule,
    MatButtonModule,
    MatTooltipModule,
    MatSnackBarModule
  ],
  templateUrl: './vulnerability-detail.component.html',
  styleUrls: ['./vulnerability-detail.component.scss']
})
export class VulnerabilityDetailComponent {
  @Input() vulnerability!: Vulnerability;

  constructor(private snackBar: MatSnackBar) {}

  getSeverityIcon(severity: string): string {
    const icons: { [key: string]: string } = {
      'CRITICAL': 'dangerous',
      'HIGH': 'warning',
      'MEDIUM': 'error_outline', 
      'LOW': 'info'
    };
    return icons[severity] || 'help';
  }

  getThreatIcon(severity: string): string {
    const icons: { [key: string]: string } = {
      'CRITICAL': 'crisis_alert',
      'HIGH': 'report_problem',
      'MEDIUM': 'priority_high',
      'LOW': 'notification_important'
    };
    return icons[severity] || 'help';
  }

  getThreatLevel(severity: string): string {
    const levels: { [key: string]: string } = {
      'CRITICAL': '極高威脅',
      'HIGH': '高度威脅',
      'MEDIUM': '中度威脅',
      'LOW': '低度威脅'
    };
    return levels[severity] || '未知威脅';
  }

  getThreatDescription(severity: string): string {
    const descriptions: { [key: string]: string } = {
      'CRITICAL': '此漏洞可能導致系統完全被攻破，攻擊者可獲得完整系統控制權，建議立即修復。',
      'HIGH': '此漏洞可能被利用來執行惡意代碼或竊取敏感數據，需要優先修復。',
      'MEDIUM': '此漏洞可能影響系統穩定性或資料完整性，建議納入修復計畫。',
      'LOW': '此漏洞風險相對較低，但仍應關注並適時修復。'
    };
    return descriptions[severity] || '威脅等級未明確定義。';
  }

  getMitigationSuggestions(severity: string): string[] {
    const suggestions: { [key: string]: string[] } = {
      'CRITICAL': [
        '立即更新套件至安全版本',
        '評估是否需要暫時停用相關功能',
        '加強系統監控和入侵檢測',
        '執行安全評估確認無其他風險',
        '建立應急回應計畫'
      ],
      'HIGH': [
        '儘快更新套件至安全版本',
        '檢查系統日誌是否有異常活動',
        '加強防火牆和存取控制',
        '定期進行安全掃描',
        '建立修復時程表'
      ],
      'MEDIUM': [
        '納入定期維護計畫',
        '監控套件更新通知',
        '執行定期安全檢查',
        '考慮使用依賴性掃描工具',
        '建立漏洞追蹤機制'
      ],
      'LOW': [
        '持續關注安全更新',
        '納入下次維護週期',
        '建立漏洞管理流程',
        '使用自動化工具監控',
        '定期檢視依賴性安全狀態'
      ]
    };
    return suggestions[severity] || ['建議諮詢安全專家意見'];
  }

  formatDate(dateString: string): string {
    if (!dateString) return '未知';
    
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('zh-TW', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      });
    } catch {
      return '日期格式錯誤';
    }
  }

  getReferenceName(url: string): string {
    try {
      const urlObj = new URL(url);
      const hostname = urlObj.hostname;
      
      // 針對常見網站提供友善名稱
      const friendlyNames: { [key: string]: string } = {
        'github.com': 'GitHub',
        'nvd.nist.gov': 'NIST NVD',
        'cve.mitre.org': 'MITRE CVE',
        'security.snyk.io': 'Snyk Security',
        'www.cvedetails.com': 'CVE Details',
        'vuldb.com': 'VulDB',
        'blog.sonatype.com': 'Sonatype Blog'
      };

      return friendlyNames[hostname] || hostname;
    } catch {
      return '參考連結';
    }
  }

  openFirstReference(): void {
    if (this.vulnerability.references && this.vulnerability.references.length > 0) {
      window.open(this.vulnerability.references[0], '_blank', 'noopener,noreferrer');
    }
  }

  copyFixCommand(): void {
    if (this.vulnerability.fixedVersion) {
      // 構建 npm 升級指令 (假設是 npm 套件)
      const packageName = this.extractPackageName();
      const command = `npm install ${packageName}@${this.vulnerability.fixedVersion}`;
      
      navigator.clipboard.writeText(command).then(() => {
        this.snackBar.open('修復指令已複製到剪貼簿', '確定', {
          duration: 3000,
          panelClass: ['success-snackbar']
        });
      }).catch(() => {
        this.snackBar.open('複製失敗，請手動複製指令', '確定', {
          duration: 3000,
          panelClass: ['error-snackbar']
        });
      });
    }
  }

  private extractPackageName(): string {
    // 這裡需要從某處獲取套件名稱
    // 在實際應用中，可能需要從父元件傳入或從服務中獲取
    return 'package-name'; // 預設值，實際使用時需要替換
  }
}